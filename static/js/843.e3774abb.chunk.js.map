{"version":3,"file":"static/js/843.e3774abb.chunk.js","mappings":"8MAAaA,EAAqB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,IAAK,E,oBCQzDC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KACHG,SAAS,oBACTC,QAAQ,6FAA4C,sBACvDC,OAAQL,EAAAA,KACLG,SAAS,sBACTC,QACC,sBACA,8DAIAE,EAAgB,CACpBJ,KAAM,GACNG,OAAQ,IAuEV,EApEoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,IAAYf,GAyBjC,OACEgB,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLN,cAAeA,EACfP,iBAAkBA,EAClBc,SA3BiB,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UACtBd,EAAiBY,EAAjBZ,KAAMG,EAAWS,EAAXT,OAQd,GALSI,EAAaQ,MAClB,SAAAC,GAAO,OAAIA,EAAQhB,KAAKiB,gBAAkBjB,EAAKiB,aAAa,IAK9DC,MAAM,GAADC,OAAInB,EAAI,gCACR,CACL,IAAMoB,EAAa,CACjBC,IAAIC,EAAAA,EAAAA,MACJtB,KAAMA,EACNG,OAAQA,GAGVE,GAASkB,EAAAA,EAAAA,IAAWH,GACtB,CACAN,GACF,EAM2BU,UAEvBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,UAAU,kBAAiBH,SAAA,EAC/Bf,EAAAA,EAAAA,KAAA,SAAOmB,QAAQ,SAASD,UAAU,cAAaH,SAAC,UAGhDf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJF,UAAU,cACVG,KAAK,OACLC,YAAY,UACZ/B,KAAK,OACLqB,GAAG,SACHpB,UAAQ,KAEVQ,EAAAA,EAAAA,KAACuB,EAAAA,GAAY,CAAChC,KAAK,OAAOiC,UAAU,MAAMN,UAAU,WAEpDlB,EAAAA,EAAAA,KAAA,SAAOmB,QAAQ,WAAWD,UAAU,cAAaH,SAAC,YAGlDf,EAAAA,EAAAA,KAACoB,EAAAA,GAAK,CACJF,UAAU,cACVG,KAAK,MACLC,YAAY,eACZ/B,KAAK,SACLqB,GAAG,WACHpB,UAAQ,KAEVQ,EAAAA,EAAAA,KAACuB,EAAAA,GAAY,CAAChC,KAAK,SAASiC,UAAU,MAAMN,UAAU,WAEtDlB,EAAAA,EAAAA,KAAA,UAAQqB,KAAK,SAASH,UAAU,kBAAiBH,SAAC,oBAM1D,E,UCxFaU,EAAe,SAAAxC,GAAK,OAAIA,EAAMyC,MAAO,EAErCC,GAAyBC,EAAAA,EAAAA,IACpC,CAAC5C,EAAoByC,IACrB,SAACI,EAAaH,GACZ,OAAOG,EAAYH,QAAO,SAAAnB,GAAO,OAC/BA,EAAQhB,KAAKiB,cAAcsB,SAASJ,EAAO,GAE/C,IC6BF,EAlCqB,WACnB,IACMxC,GAAWa,EAAAA,EAAAA,KADQ,SAAAd,GAAK,OAAI0C,EAAuB1C,EAAO,IAG1DW,GAAWC,EAAAA,EAAAA,MAMjB,OACEG,EAAAA,EAAAA,KAAA,OAAAe,SACG7B,GAAYA,EAAS6C,OAAS,GAC7B/B,EAAAA,EAAAA,KAAA,MAAIkB,UAAU,cAAaH,SACxB7B,EAAS8C,KAAI,SAAA5B,GAAA,IAAGQ,EAAER,EAAFQ,GAAIrB,EAAIa,EAAJb,KAAMG,EAAMU,EAANV,OAAM,OAC/BsB,EAAAA,EAAAA,MAAA,MAAaE,UAAU,oBAAmBH,SAAA,CACvCxB,EAAK,KAAGG,GACTM,EAAAA,EAAAA,KAAA,UACEqB,KAAK,SACLH,UAAU,mBACVe,QAAS,kBAdMC,EAcqBtB,OAbhDhB,GAASuC,EAAAA,EAAAA,IAAcD,IADI,IAAAA,CAcwB,EAACnB,SACzC,aANMH,EASJ,OAITZ,EAAAA,EAAAA,KAAA,KAAAe,SAAG,wBAIX,E,UCPA,EAzBe,WACb,IAAMnB,GAAWC,EAAAA,EAAAA,MACX6B,GAAS3B,EAAAA,EAAAA,IAAY0B,GAM3B,OACET,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmBH,SAAA,EAChCC,EAAAA,EAAAA,MAAA,SAAOG,QAAQ,WAAWD,UAAU,gBAAeH,SAAA,CAChD,IAAI,wBACiB,QAExBf,EAAAA,EAAAA,KAAA,SACEqB,KAAK,OACLe,MAAOV,EACPd,GAAG,WACHyB,SAdsB,SAAAC,GAC1B1C,GAAS2C,EAAAA,EAAAA,GAAUD,EAAEE,cAAcJ,OACrC,EAaMlB,UAAU,oBAIlB,ECLA,EAjBiB,WACf,IAAMtB,GAAWC,EAAAA,EAAAA,MAMjB,OAJA4C,EAAAA,EAAAA,YAAU,WACR7C,GAAS8C,EAAAA,EAAAA,MACX,GAAG,CAAC9C,KAGFoB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,iBAAgBH,SAAA,EAC7Bf,EAAAA,EAAAA,KAAA,MAAAe,SAAI,eACJf,EAAAA,EAAAA,KAAC2C,EAAW,KACZ3C,EAAAA,EAAAA,KAAA,MAAAe,SAAI,cACJf,EAAAA,EAAAA,KAAC4C,EAAM,KACP5C,EAAAA,EAAAA,KAAC6C,EAAY,MAGnB,C","sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/filter/filter-selectors.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContactsList = state => state.contacts.list;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport './ContactForm.scss';\nimport { selectContactsList } from '../../redux/contacts/contacts-selectors';\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Name is required')\n    .matches(/^[a-zA-Zа-яА-ЯІіЇїҐґ' \\-\\u0400-\\u04FF]+$/, 'Invalid characters'),\n  number: Yup.string()\n    .required('Number is required')\n    .matches(\n      /^\\d{3}-\\d{3}-\\d{4}$/,\n      'Invalid phone number. Please use the format 111-111-1111'\n    ),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(selectContactsList);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const isContactDuplicate = () => {\n      return contactsList.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      );\n    };\n\n    if (isContactDuplicate()) {\n      alert(`${name} is already in contacts`);\n    } else {\n      const newContact = {\n        id: nanoid(),\n        name: name,\n        number: number,\n      };\n\n      dispatch(addContact(newContact));\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form className=\"Form__container\">\n        <label htmlFor=\"nameId\" className=\"Form__label\">\n          Name\n        </label>\n        <Field\n          className=\"Form__input\"\n          type=\"text\"\n          placeholder=\"Jon Doe\"\n          name=\"name\"\n          id=\"nameId\"\n          required\n        />\n        <ErrorMessage name=\"name\" component=\"div\" className=\"Error\" />\n\n        <label htmlFor=\"numberId\" className=\"Form__label\">\n          Number\n        </label>\n        <Field\n          className=\"Form__input\"\n          type=\"tel\"\n          placeholder=\"123-456-7890\"\n          name=\"number\"\n          id=\"numberId\"\n          required\n        />\n        <ErrorMessage name=\"number\" component=\"div\" className=\"Error\" />\n\n        <button type=\"submit\" className=\"AddContact__btn\">\n          Add Contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import { createSelector } from 'reselect';\nimport { selectContactsList } from '../contacts/contacts-selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContactsList, selectFilter],\n  (contactList, filter) => {\n    return contactList.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\nimport { selectFilteredContacts } from '../../redux/filter/filter-selectors';\nimport './ContactsList.scss';\n\nconst ContactsList = () => {\n  const contactsSelector = state => selectFilteredContacts(state);\n  const contacts = useSelector(contactsSelector);\n\n  const dispatch = useDispatch();\n\n  const deleteContactHandler = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      {contacts && contacts.length > 0 ? (\n        <ul className=\"ContactList\">\n          {contacts.map(({ id, name, number }) => (\n            <li key={id} className=\"ContactList__item\">\n              {name}: {number}\n              <button\n                type=\"button\"\n                className=\"ContactList__btn\"\n                onClick={() => deleteContactHandler(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No saved contacts.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/filter/filter-selectors';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport './Filter.scss';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilterHandler = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <div className=\"Filter__container\">\n      <label htmlFor=\"filterId\" className=\"Filter__label\">\n        {' '}\n        Find contacts by name{' '}\n      </label>\n      <input\n        type=\"text\"\n        value={filter}\n        id=\"filterId\"\n        onChange={changeFilterHandler}\n        className=\"Filter__input\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\nimport ContactForm from '../../components/ContactForm';\nimport ContactsList from '../../components/ContactsList';\nimport Filter from '../../components/Filter';\n\nconst UserPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App__container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n};\nexport default UserPage;\n"],"names":["selectContactsList","state","contacts","list","validationSchema","Yup","shape","name","required","matches","number","initialValues","dispatch","useDispatch","contactsList","useSelector","_jsx","Formik","onSubmit","values","_ref","resetForm","some","contact","toLowerCase","alert","concat","newContact","id","nanoid","addContact","children","_jsxs","Form","className","htmlFor","Field","type","placeholder","ErrorMessage","component","selectFilter","filter","selectFilteredContacts","createSelector","contactList","includes","length","map","onClick","contactId","deleteContact","value","onChange","e","setFilter","currentTarget","useEffect","fetchContacts","ContactForm","Filter","ContactsList"],"sourceRoot":""}